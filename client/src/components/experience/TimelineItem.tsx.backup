import { motion, AnimatePresence } from 'framer-motion';
import { useState } from 'react';
import { FaChevronDown, FaMapMarkerAlt, FaCalendarAlt } from 'react-icons/fa';

interface TimelineItemProps {
  position: number;
  date: string;
  title: string;
  company: string;
  description: string;
  skills: string[];
  keyPoints?: string[];
  location?: string;
  ongoing?: boolean;
}

const TimelineItem: React.FC<TimelineItemProps> = ({
  position,
  date,
  title,
  company,
  description,
  skills,
  keyPoints,
  location,
  ongoing
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div 
      className="timeline-item relative ml-6 md:ml-0 mb-12 md:grid md:grid-cols-12 md:gap-4"
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: position * 0.1 }}
      viewport={{ once: true }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <div className="hidden md:block md:col-span-4 text-right pr-8 pt-5">
        <motion.div 
          className={`text-sm font-mono flex items-center justify-end gap-2 ${ongoing ? 'text-green-500' : 'text-primary-light'}`}
          animate={{ opacity: isHovered ? 1 : 0.8 }}
        >
          <FaCalendarAlt className="w-3 h-3" />
          {date} {ongoing && (
            <motion.span 
              className="inline-flex items-center px-2 py-1 rounded-full bg-green-500/20 text-green-500 text-xs"
              animate={{ scale: [1, 1.05, 1] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              Ongoing
            </motion.span>
          )}
        </motion.div>
        
        <motion.h4 
          className="font-space font-bold text-white mb-1"
          animate={{ 
            background: isHovered 
              ? 'linear-gradient(45deg, #3b82f6, #8b5cf6)'
              : 'transparent',
            WebkitBackgroundClip: isHovered ? 'text' : 'unset',
            WebkitTextFillColor: isHovered ? 'transparent' : 'white'
          }}
          transition={{ duration: 0.3 }}
        >
          {title}
        </motion.h4>
        
        <p className="text-slate-300 text-sm font-medium">{company}</p>
        
        {location && (
          <div className="flex items-center justify-end gap-1 mt-1 text-slate-400 text-sm">
            <FaMapMarkerAlt className="w-3 h-3" />
            {location}
          </div>
        )}
      </div>
      
      <motion.div 
        className="md:col-span-8 bg-white/5 backdrop-blur-sm p-6 rounded-xl border border-white/10 transition-all duration-300 relative overflow-hidden"
        whileHover={{ 
          y: -5,
          borderColor: 'rgba(59, 130, 246, 0.3)',
          boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1), 0 0 20px rgba(59, 130, 246, 0.1)'
        }}
        animate={{
          borderColor: isHovered ? 'rgba(59, 130, 246, 0.3)' : 'rgba(255, 255, 255, 0.1)'
        }}
      >
        {/* Animated background gradient */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-secondary/5 opacity-0"
          animate={{ opacity: isHovered ? 1 : 0 }}
          transition={{ duration: 0.3 }}
        />
        
        <div className="relative z-10">
          <div className="md:hidden mb-3">
            <div className={`text-sm font-mono flex items-center gap-2 ${ongoing ? 'text-green-500' : 'text-primary-light'}`}>
              <FaCalendarAlt className="w-3 h-3" />
              {date} {ongoing && <span className="text-green-500">(Ongoing)</span>}
            </div>
            <h4 className="font-space font-bold text-white">{title}</h4>
            <p className="text-slate-300 text-sm">{company}</p>
            
            {location && (
              <div className="flex items-center gap-1 mt-1 text-slate-400 text-sm">
                <FaMapMarkerAlt className="w-3 h-3" />
                {location}
              </div>
            )}
          </div>
          
          <p className="text-slate-300 mb-4">
            {description}
          </p>

          {/* Enhanced Key Points section */}
          {keyPoints && keyPoints.length > 0 && (
            <div className="mb-4">
              <motion.button
                onClick={() => setIsExpanded(!isExpanded)}
                className="flex items-center gap-2 text-primary hover:text-primary-dark transition-colors text-sm font-medium group"
                whileHover={{ x: 5 }}
              >
                <span>{isExpanded ? 'Hide Details' : 'Show Key Responsibilities'}</span>
                <motion.div
                  animate={{ rotate: isExpanded ? 180 : 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <FaChevronDown className="w-3 h-3" />
                </motion.div>
              </motion.button>

              <AnimatePresence>
                {isExpanded && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3 }}
                    className="mt-3 overflow-hidden"
                  >
                    <ul className="space-y-2 pl-4">
                      {keyPoints.map((point, idx) => (
                        <motion.li
                          key={idx}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: idx * 0.1 }}
                          className="text-slate-400 text-sm flex items-start gap-2"
                        >
                          <span className="text-primary mt-1">â€¢</span>
                          <span>{point}</span>
                        </motion.li>
                      ))}
                    </ul>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          )}

          {/* Enhanced Skills with hover effects */}
          <div className="flex flex-wrap gap-2">
            {skills.map((skill, index) => (
              <motion.span
                key={index}
                className="px-3 py-1 rounded-full bg-primary/10 text-primary-light text-xs font-medium border border-primary/20 cursor-default"
                whileHover={{ 
                  scale: 1.1,
                  backgroundColor: 'rgba(59, 130, 246, 0.2)',
                  borderColor: 'rgba(59, 130, 246, 0.4)'
                }}
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: index * 0.05 }}
              >
                {skill}
              </motion.span>
            ))}
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default TimelineItem;
